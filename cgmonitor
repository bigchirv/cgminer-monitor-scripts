#!/bin/bash
#set -x
function _usage() {
cat <<EOF
Usage: $0 [options]

-c|--config <conffile>  Selects the config file to use. Defaults to
                        config.sh.
-e|--endip              IP range ends on this IP.
-f|--fans               Shows the fans RPMs information.
-h|--hashrate           Shows the miner(s) hashrate (default action).
-l|--lcd                Shows the cgminer's raw LCD output.
-n|--netnode <ip_addr>  Specify a node of the network (4th octet in
                        its IP address).
-r|--reboot             Reboots one (-n) or all the nodes of a
                        network.
-s|--startip            IP range starts on this IP.
-t|--temp               Shows the temperature information.
-x|--listx              Shows a count of 'x' in every acs.
-y|--yes                Autoconfirms every command. The script will
                        not ask for confirmations on every action
-z|--zeroreboot         Reboots one (-n) or all the nodes of a
                        network on 0 GHs.
--help                  Shows this help text.
EOF
exit 0
}


function _confirmReboot() {
#$1 especify a node
MSG="Please confirm you want to reboot from $NET_START to $NET_END"
if [ $NET_START = $NET_END ]; then
  MSG="Please confirm you want to reboot $NET_START"
elif [ "$1" != "" ]; then
  MSG="Please confirm you want to reboot this node ($1)"
fi

if [ "$AUTOCONFIRM" != "TRUE" ]; then
  read -p "$MSG: (y/n) "
else
  REPLY="y"
fi

if [ $REPLY != "y" ]; then
  echo "Cancelled"
  exit 1
fi
}


function _reboot() {
#$1 Miner node IP
_IP="$1"
RES=$(sshpass -p admin ssh -oStrictHostKeyChecking=no -l root $_IP /sbin/reboot >&2 2> /dev/null)
if [ "$?" -eq "0" ]; then
  echo Rebooting
else
  echo Error
fi
}


function _getStats() {
# $1 Miner node IP
# $2 common string
# $3 grep string
_IP="$1"
_STR="$2"
_GREPSTR="\[$2"
if [ "$3" != "" ]; then
  _GREPSTR="$3"
fi
_CMD='stats'
if [ "$2" == "lcd" ]; then
  _CMD='lcd'
  _GREPSTR='\['
fi

RES=$(cgminer-api $_CMD $_IP | grep -i "$_GREPSTR")
if [ "$?" -eq "0" ]; then
  if [ "$_STR" == "fan" ] || [ "$_STR" == "temp" ]; then
    NUM=$(echo $RES | grep "${_STR}_num" | cut -f2 -d">" | cut -f2 -d" ")
    ((NUM++))
    RES=$(echo $RES | sed -e 's/\[/\n\[/g' | grep -v "${_STR}_num" | head -$NUM)
  elif [ "$_GREPSTR" == "\[GHS 5s" ] && [ "$(echo $RES | cut -f4 -d' ' | cut -f1 -d'.')" -eq "0" ]; then
    echo -n "Hashrate 5s reporting 0 GHs. "
    _confirmReboot $_IP
    _reboot $_IP
  fi
  echo $RES
else
  echo Offline
fi
}

function _generateIpAddrs() {
# Taken from http://wp.subnetzero.org/?p=241
IPLO=(`echo "$1" | awk '{split($1,a,"."); print a[1]" "a[2]" "a[3]" "a[4]}'`)
IPHI=(`echo "$2" | awk '{split($1,a,"."); print a[1]" "a[2]" "a[3]" "a[4]}'`)
OCTA=${IPLO[0]}
OCTB=${IPLO[1]}
OCTC=${IPLO[2]}
OCTD=${IPLO[3]}
OCTAHI=${IPHI[0]}
OCTBHI=${IPHI[1]}
OCTCHI=${IPHI[2]}
OCTDHI=${IPHI[3]}
OCTDMAX=255
FINISHED=0

for i in 0 1 2 3
do
  if [ -z "${IPLO[$i]}" ] || [ -z "${IPHI[$i]}" ]; then
    echo "Usage: $0 [from ip] [to ip]"
    exit 1
  elif [ "${IPLO[$i]}" -gt "255" ] || [ "${IPHI[$i]}" -gt "255" ];then
    echo "One of your values is broken (greater than 255)."
    exit 1
  fi
done

until [ "$FINISHED" -eq "1" ];
do
  if [ "$OCTA" -eq "$OCTAHI" ] &&  [ "$OCTB" -eq "$OCTBHI" ] &&  [ "$OCTC" -eq "$OCTCHI" ]; then
    OCTDMAX=$OCTDHI
  fi

  while [ "$OCTD" -le "$OCTDMAX" ];
  do
    if [ "$NET_RANGE" == "" ]; then
      NET_RANGE="$OCTA.$OCTB.$OCTC.$OCTD"
    else
      NET_RANGE="$NET_RANGE $OCTA.$OCTB.$OCTC.$OCTD"
    fi

    if [ "$OCTA" -eq "$OCTAHI" ] && \
     [ "$OCTB" -eq "$OCTBHI" ] && \
     [ "$OCTC" -eq "$OCTCHI" ] && \
     [ "$OCTD" -eq "$OCTDHI" ]; then
      FINISHED=1
    fi
    OCTD=$(( $OCTD + 1 ))
  done

  OCTC=$(( $OCTC + 1 ))
  OCTD="0"

  if [ "$OCTC" -gt "255" ]; then
    OCTB=$(( $OCTB + 1 ))
    OCTC="0"
  fi

  if [ "$OCTB" -gt "255" ]; then
    OCTA=$(( $OCTA + 1 ))
    OCTB="0"
  fi

  if [ "$OCTA" -gt "255" ]; then
    FINISHED=1
  fi
done

}


# main code
CONFIGFILE="config.sh"
COMMAND="hashrate"
NET_START="192.168.1.1"
NET_END="192.168.1.254"
NET_RANGE=""
NET_NODE=""


while [[ $# -ge 1 ]]; do
  KEY="$1"
  case $KEY in
    -c|--config)
      CONFIGFILE="$2"
      shift
      ;;
    -e|--endip)
      NET_END="$2"
      shift
      ;;
    -f|--fans)
      COMMAND="fans"
      ;;
    -h|--hashrate)
      COMMAND="hashrate"
      ;;
    -l|--lcd)
      COMMAND="lcd"
      ;;
    -n|--netnode)
      NET_NODE="$2"
      shift
      ;;
    -r|--reboot)
      COMMAND="reboot"
      ;;
    -s|--startip)
      NET_START="$2"
      shift
      ;;
    -t|--temp)
      COMMAND="temp"
      ;;
    -x|--listx)
      COMMAND="listx"
      ;;
    -y|--yes)
      AUTOCONFIRM="TRUE"
      ;;
    -z|--zeroreboot)
      COMMAND="zeroreboot"
      ;;
    --help)
      COMMAND="usage"
      ;;
    *)
      #Nothing
      ;;
  esac
  shift
done

if [ "$COMMAND" == "usage" ]; then
  _usage
fi

if [ -f $CONFIGFILE ]; then
  source $CONFIGFILE
fi

if [ "$NET_NODE" != "" ]; then
  NET_START=$NET_NODE
  NET_END=$NET_NODE
fi

_generateIpAddrs $NET_START $NET_END

for IP in $NET_RANGE
do
  echo -n "$IP: "
  case $COMMAND in
    fans)
      _getStats $IP fan
      ;;
    hashrate)
      _getStats $IP GHS
      ;;
    lcd)
      _getStats $IP lcd
      ;;
    reboot)
      _confirmReboot
      _reboot $IP
      ;;
    temp)
      _getStats $IP temp
      ;;
    listx)
      _getStats $IP chain_acs
      ;;
    zeroreboot)
      _getStats $IP GHS\ 5s
      ;;
  esac
done

